apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

ext.home = System.env.HOME
ext.basePath = System.getProperty("user.dir")
ext.ideaPath = "/Applications/IntelliJ IDEA 15 EAP.app/Contents"


repositories {
	mavenCentral()
	mavenLocal()
    maven { url 'lib' }
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
	compile "org.codehaus.groovy:groovy:2.3.9"
	compile "org.codehaus.groovy:groovy-json:2.3.9"
    compile "codemining:core:1.0"
    compile "codemining:vcs-reader:1.0"
    compile "org.apache.commons:commons-csv:1.0"
    compile "liveplugin:live-plugin:0.5.4 beta"

    provided fileTree(dir: "${ideaPath}/lib/", include: "*.jar", exclude: "groovy-all*.jar")
    provided fileTree(dir: "${ideaPath}/plugins/git4idea/lib/", include: "*.jar")
    provided fileTree(dir: "${ideaPath}/plugins/github/lib/", include: "*.jar")
}

sourceSets {
    main {
        java { srcDir "./intellij-adapter/src" }
        groovy { srcDir "./" }
    }
}

task jarPlugin(dependsOn: [compileGroovy]) << {
    def targetFolder = "${basePath}/build/code-history-mining-plugin/code-history-mining-plugin"
    ant.delete(dir: targetFolder)

    ant.copy(toDir: "${basePath}/build/classes/main/META-INF/") {
        ant.fileset(dir: "${basePath}/intellij-adapter/META-INF")
    }

    ant.delete(dir: "${basePath}/build/classes/main/.idea")
    ant.delete(dir: "${basePath}/build/classes/main/lib")
	ant.copy(toDir: "${basePath}/build/classes/main/codemining") {
		ant.fileset(dir: "${basePath}/codemining/", includes: "**/*.html **/*.css **/*.js")
	}
    ant.jar(baseDir: "${basePath}/build/classes/main/", destFile: "$targetFolder/lib/code-history-mining-plugin.jar")

    ant.copy(toDir: "$targetFolder/lib", flatten: true) { file ->
        ant.fileset(dir: "${basePath}/lib") {
            include(name: "**/*.jar")
        }
    }
}

task zipPlugin(dependsOn: jarPlugin) << {
    ant.zip(
        destfile: "${basePath}/build/code-history-mining-plugin.zip",
        basedir: "${basePath}/build/code-history-mining-plugin"
    )
}

task downloadMavenDependencies() << {
    copyAllMavenDependenciesTo("lib", [configurations.compile])
}

def copyMavenDependenciesTo(String targetDirPath, Configuration configuration) {
    Collection<File> files = configuration.files
    def allDependencies = allDependenciesOf(configuration.resolvedConfiguration)

    def dependenciesInfo = allDependencies.collect { ResolvedDependency dependency ->
        def relativePath = (dependency.moduleGroup.split("\\.") + [dependency.moduleName, dependency.moduleVersion]).join(File.separator)
        [path: relativePath, fileName: dependency.moduleName + "-" + dependency.moduleVersion + ".jar"]
    }
    if (!files.collect{it.name}.containsAll(dependenciesInfo.collect{it.fileName})) {
        throw new IllegalStateException(
                "Expected files to contain all dependencies. But was\n" +
                        "files:\n${files.join("\n")}\n" +
                        "dependencies:\n${dependenciesInfo.join("\n")}"
        )
    }

    dependenciesInfo.each { dependencyInfo ->
        def file = files.find { it.name == dependencyInfo.fileName }
        def dir = new File(targetDirPath + File.separator + dependencyInfo.path)
        dir.mkdirs()
        new AntBuilder().copy(
                file: file.canonicalPath,
                todir: dir.canonicalPath
        )
    }
}
def copyAllMavenDependenciesTo(String targetDirPath, Collection<Configuration> configurations) {
    ant.delete(dir: targetDirPath)
    for (Configuration configuration : configurations) {
        copyMavenDependenciesTo(targetDirPath, configuration)
    }
}
def allDependenciesOf(ResolvedConfiguration configuration) {
    configuration.firstLevelModuleDependencies.collectMany { allDependenciesOf(it) }
}
def allDependenciesOf(ResolvedDependency dependency, Set result = []) {
    if (result.containsAll(dependency.children)) [dependency]
    else [dependency] + dependency.children.collectMany{ child -> allDependenciesOf(child) }
}
