apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

ext.home = System.env.HOME
ext.basePath = System.getProperty("user.dir")
ext.ideaPath = "/Applications/IntelliJ IDEA 14.app/Contents"


repositories {
	mavenCentral()
	mavenLocal()
    maven { url 'lib' }
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.2.1"
    compile "codemining:core:1.0"
    compile "codemining:vcs-reader:1.0"
    compile "org.apache.commons:commons-csv:1.0"
    compile "liveplugin:live-plugin:0.5.2 beta"

    provided fileTree(dir: "${ideaPath}/lib/", include: "*.jar")
    provided fileTree(dir: "${ideaPath}/plugins/git4idea/lib/", include: "*.jar")
    provided fileTree(dir: "${ideaPath}/plugins/github/lib/", include: "*.jar")
}

sourceSets {
    main {
        java { srcDir "./intellij-adapter/src" }
        groovy { srcDir "./" }
    }
}

task jarPlugin(dependsOn: [compileGroovy]) << {
    def targetFolder = "${basePath}/build/code-history-mining-plugin/code-history-mining-plugin"
    ant.delete(dir: targetFolder)

    ant.copy(toDir: "${basePath}/build/classes/main/META-INF/") {
        ant.fileset(dir: "${basePath}/intellij-adapter/META-INF")
    }

    ant.delete(dir: "${basePath}/build/classes/main/.idea")
    ant.delete(dir: "${basePath}/build/classes/main/lib")
    ant.jar(baseDir: "${basePath}/build/classes/main/", destFile: "$targetFolder/lib/code-history-mining-plugin.jar")

    ant.copy(toDir: "$targetFolder/lib", flatten: true) { file ->
        ant.fileset(dir: "${basePath}/lib") {
            include(name: "**/*.jar")
        }
    }
}

task zipPlugin(dependsOn: jarPlugin) << {
    ant.zip(
        destfile: "${basePath}/build/code-history-mining-plugin.zip",
        basedir: "${basePath}/build/code-history-mining-plugin"
    )
}

task downloadMavenDependencies() << {
    copyAllMavenDependenciesTo("lib", [configurations.compile])
}

def copyMavenDependenciesTo(String targetDirPath, Configuration configuration) {
    Collection<Dependency> dependencies = configuration.allDependencies.toList().findAll{ it instanceof ExternalModuleDependency }
    Collection<File> files = configuration.files

    def dependenciesInfo = dependencies.collect { Dependency dependency ->
        def relativePath = (dependency.group.split("\\.") + [dependency.name, dependency.version]).join(File.separator)
        [
            path: relativePath,
            fileName: dependency.name + "-" + dependency.version + ".jar"
        ]
    }
    if (!files.collect{it.name}.containsAll(dependenciesInfo.collect{it.fileName})) {
        throw new IllegalStateException(
            "Expected files to contain all dependencies. But was\n" +
            "files:\n${files.join("\n")}\n" +
            "dependencies:\n${dependenciesInfo.join("\n")}"
        )
    }
    def dependenciesAndFiles = [dependenciesInfo.sort{ it.fileName }, files.sort{ it.name }].transpose()

    dependenciesInfo.each { dependencyInfo ->
        def file = files.find { it.name == dependencyInfo.fileName }
        def dir = new File(targetDirPath + File.separator + dependencyInfo.path)
        dir.mkdirs()
        new groovy.util.AntBuilder().copy(
            file: file.canonicalPath,
            todir: dir.canonicalPath
        )
    }
}

def copyAllMavenDependenciesTo(String targetDirPath, Collection<Configuration> configurations) {
    ant.delete(dir: targetDirPath)
    for (Configuration configuration : configurations) {
        copyMavenDependenciesTo(targetDirPath, configuration)
    }
}

def withDefault(value, defaultValue) {
    value == null ? defaultValue : value
}