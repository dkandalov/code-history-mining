apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'

ext.home = System.env.HOME
ext.basePath = System.getProperty("user.dir")
ext.ideaPath = "/Applications/IntelliJ IDEA 15.app/Contents"


repositories {
	mavenCentral()
	mavenLocal()
    maven { url 'lib' }
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
	compile "org.codehaus.groovy:groovy:2.4.6"
	compile "org.codehaus.groovy:groovy-json:2.4.6"
    compile "codehistoryminer:core:1.0"
    compile "codehistoryminer:vcs-reader:1.0"
    compile "org.apache.commons:commons-csv:1.0"
    compile "liveplugin:live-plugin:0.5.8 beta"

    provided fileTree(dir: "${ideaPath}/lib/", include: "*.jar", exclude: "groovy-all*.jar")
    provided fileTree(dir: "${ideaPath}/plugins/git4idea/lib/", include: "*.jar")
}

sourceSets {
    main {
        java { srcDir "./src/main" }
        groovy { srcDir "./src/main" }
	    resources { srcDir "src/resources" }
    }
	test {
		java { srcDir "./src/test" }
		groovy { srcDir "./src/test" }
	}
}

//noinspection GroovyAssignabilityCheck
task jarPlugin(dependsOn: [compileGroovy]) << {
	def libDir = "${basePath}/lib"
	def srcDir = "${basePath}/src/main"
	def resourcesDir = "${basePath}/src/resources"
	def compiledDir = "${basePath}/build/classes/main"
	def targetDir = "${basePath}/build/code-history-mining-plugin/code-history-mining-plugin"

    ant.delete(dir: targetDir)

    ant.copy(toDir: "${compiledDir}/META-INF/") {
        ant.fileset(dir: "${resourcesDir}/META-INF")
    }

    ant.delete(dir: "${compiledDir}/.idea")
    ant.delete(dir: "${compiledDir}/lib")
	ant.copy(toDir: "${compiledDir}/codehistoryminer") {
		ant.fileset(dir: "${srcDir}/codehistoryminer/", includes: "**/*.html **/*.css **/*.js **/*.gdsl")
	}
    ant.jar(baseDir: compiledDir, destFile: "$targetDir/lib/code-history-mining-plugin.jar")

    ant.copy(toDir: "$targetDir/lib", flatten: true) { file ->
        ant.fileset(dir: libDir) { include(name: "**/*.jar") }
    }
}

//noinspection GroovyAssignabilityCheck
task validatePluginJar(dependsOn: jarPlugin) << {
  	def targetDir = "${basePath}/build/code-history-mining-plugin/code-history-mining-plugin" // TODO
	assert new File(targetDir).listFiles().collect{it.name} == ["lib"]

	def expectedFiles = [
			"annotations-.*.jar",
			"code-history-mining-plugin.jar",
			"commons-csv-.*.jar",
			"core-.*.jar",
			"groovy-.*.jar",
			"groovy-json-.*.jar",
			"live-plugin-.*.jar",
			"vcs-reader-.*.jar",
	]
	def actualFiles = new File(targetDir + "/lib").listFiles().collect{it.name}.sort()
	[actualFiles, expectedFiles].transpose().each { String actual, String expected ->
		assert actual.matches(expected)
	}
	assert actualFiles.size() == expectedFiles.size()
}

//noinspection GroovyAssignabilityCheck
task zipPlugin(dependsOn: jarPlugin) << {
    ant.zip(
        destfile: "${basePath}/build/code-history-mining-plugin.zip",
        basedir: "${basePath}/build/code-history-mining-plugin"
    )
}

task downloadMavenDependencies() << {
    copyAllMavenDependenciesTo("lib", [configurations.compile])
}

def copyMavenDependenciesTo(String targetDirPath, Configuration configuration) {
    Collection<File> files = configuration.files
    def allDependencies = allDependenciesOf(configuration.resolvedConfiguration)

    def dependenciesInfo = allDependencies.collect { ResolvedDependency dependency ->
        def relativePath = (dependency.moduleGroup.split("\\.") + [dependency.moduleName, dependency.moduleVersion]).join(File.separator)
        [path: relativePath, fileName: dependency.moduleName + "-" + dependency.moduleVersion + ".jar"]
    }
    if (!files.collect{it.name}.containsAll(dependenciesInfo.collect{it.fileName})) {
        throw new IllegalStateException(
                "Expected files to contain all dependencies. But was\n" +
                "files:\n${files.join("\n")}\n" +
                "dependencies:\n${dependenciesInfo.join("\n")}"
        )
    }

    dependenciesInfo.each { dependencyInfo ->
        def file = files.find { it.name == dependencyInfo.fileName }
        def dir = new File(targetDirPath + File.separator + dependencyInfo.path)
        dir.mkdirs()
	    println("Copying: ${file.canonicalPath}")
        new groovy.util.AntBuilder().copy(
                file: file.canonicalPath,
                todir: dir.canonicalPath
        )
    }
}
def copyAllMavenDependenciesTo(String targetDirPath, Collection<Configuration> configurations) {
    ant.delete(dir: targetDirPath)
    for (Configuration configuration : configurations) {
        copyMavenDependenciesTo(targetDirPath, configuration)
    }
}
def allDependenciesOf(ResolvedConfiguration configuration) {
    configuration.firstLevelModuleDependencies.collectMany { allDependenciesOf(it) }
}
def allDependenciesOf(ResolvedDependency dependency, Set result = []) {
    if (result.containsAll(dependency.children)) [dependency]
    else [dependency] + dependency.children.collectMany{ child -> allDependenciesOf(child) }
}
